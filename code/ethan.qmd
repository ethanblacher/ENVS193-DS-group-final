---
title: "ethan"
format: html
editor: visual
---

```{r Install_Packages}
# should haves (from last week)
library(tidyverse)
library(here)
library(janitor)
library(ggeffects)
library(performance)
library(naniar) # or equivalent
library(flextable) # or equivalent
library(car)
library(broom)
# would be nice to have
library(corrplot)
library(AICcmodavg)
library(GGally)
library(MuMIn)
library(MASS) # have to read this in before tidyverse 
library(lme4)
library(glmmTMB) # ok if you don't have this - just comment it out

# diagnostics and model info
library(DHARMa)
library(lmtest)
library(skimr)
```

```{r Read_Data}
#read in using here pertinent csv file
flower <- read_csv(here("data", "prob2", "shrubstudy_seed_ctwt.ms.data.csv"))
#for gg_miss_var
flower_viz <-flower
flower<-flower%>%
  #drop rows with missing data
  drop_na(nr_seeds)%>%
  clean_names()
flower_subset <- flower %>% 
#create a new dataset of flower, which drops the missing data from nr_seeds because its pertinent to our study
  drop_na(nr_seeds)%>%
  #removed a few columns that were not relevant to ggpairs
  clean_names()%>%
  mutate(date_collected = NULL, shrub_num = NULL, aspect= NULL, tag_num= NULL, plant_nr = NULL, dist_fr_shr = NULL, nr_infl_coll = NULL, wt_seeds_mg = NULL, notes = NULL)

```

In order to organize the data after reading in the necessary packages, it is important to see what data was measured. To do so, the seed count csv file was read in using the read_csv and the here function. We then made two different data sets, flower_viz to see missing data, flower, which cleaned the names and dropped the missing data for nr_seeds which was pertinent to our model and visualization and flower_subset, which dropped columns that we didn't need specifically for our ggpairs plot.

```{r exploring_data}
ggplot(data= flower, aes(x=nr_seeds))+
  geom_histogram(bins=13)
#not normal
``
```

```{r missing_data_viz}
gg_miss_var(flower_viz)

```

```{r skim-dataset}
skim(flower_subset)
```

```{r pairs-plot}
#| fig.width: 12
#| fig.height: 12
#| out.width: 90%
#| fig.align: center
#flower_subset %>%
  #take out site
# select(!species)%>%
ggpairs(flower_subset)
```

```{r models}
# linear model, we know this is wrong
flowermod1 <- lm(nr_seeds~treatment+species+total_nr_infl, data = flower)

# generalized linear model with Poisson distribution
flowermod2 <- glm(nr_seeds~treatment+species+total_nr_infl, data = flower, family="poisson")

# generalized linear model with negative binomial distribution
flowermod3 <- glm.nb(nr_seeds~treatment+species+total_nr_infl, data = flower)

# generalized linear model with Poisson distribution and random effect of site
#flowermod4 <- glmer(nr_seeds~treatment+species+total_nr_infl + (1|shrub_num), data = flower, family = "poisson")

#flowermod4.a <- glmmTMB(nr_seeds~treatment+species+total_nr_infl + (1|shrub_num), data = flower, family = "poisson")

# generalized linear model with negative binomial distribution and random effect of site
#flowermod5 <- glmer.nb(nr_seeds~treatment+species+total_nr_infl + (1|shrub_num), data = flower)

#flowermod5.a <- glmmTMB(nr_seeds~treatment+species+total_nr_infl + (1|shrub_num), data = flower, family = "nbinom2")
```

```{r model-residuals}
#| fig.height: 6
#| fig.width: 8
#| fig.align: center

# check diagnostics
simulateResiduals(flowermod1, plot=TRUE)
simulateResiduals(flowermod2, plot=TRUE)
simulateResiduals(flowermod2.a, plot =TRUE)
simulateResiduals(flowermod3, plot=TRUE)
simulateResiduals(flowermod3.a, plot =TRUE)
simulateResiduals(flowermod4, plot=TRUE)
simulateResiduals(flowermod4.a, plot=TRUE)
simulateResiduals(flowermod5, plot=TRUE)
simulateResiduals(flowermod5.a, plot=TRUE)
```

```{r choosing-model}
model.sel(flowermod1,flowermod2, flowermod3, flowermod4, flowermod5)

```

```{r summaries}
# model object
flowermod3

# summary 
summary(flowermod3)

# confidence intervals
confint(flowermod3)

# adjusted R2
r.squaredGLMM(flowermod3)

```

```{r Multicollinearity-test}
car::vif(flowermod3)
```

```{r}
# model object in table
flowermod3%>%
  as_flextable()
```

```{r null-model}

null_flower <- glm.nb(nr_seeds~1, data = flower)

simulateResiduals(null_flower, plot= TRUE)

```

```{r AICc-values-for-null-and-mod3}
model.sel(flowermod3, null_flower)
```

```{r create-simple-models}
flowermod_treatment <- glm.nb(nr_seeds~treatment, data = flower)
flowermod_species <- glm.nb(nr_seeds~species, data = flower)
flowermod_infl <- glm.nb(nr_seeds~total_nr_infl, data = flower)

simulateResiduals(flowermod_treatment, plot= TRUE)
simulateResiduals(flowermod_species, plot= TRUE)
simulateResiduals(flowermod_infl, plot= TRUE)

```

```{r AICc-model_mod3_and_simple}

model.sel(flowermod3, flowermod_infl, flowermod_species, flowermod_treatment)
```

```{r summary statistics}
summary(flowermod3)
#getting IRR values using the exp(coef()) function
exp_coef2 <- exp(coef(flowermod3))
exp_coef2

tidy(flowermod3, conf.int = TRUE, conf.level = .95) 
```

```{r}
ggplot(data=flowermod3, aes(x=treatment, y=nr_seeds, fill=predicted))+
  geom_boxplot(position = position_dodge(width=.8), color ="black")+
  labs(x="Species", y =" Seed Count", title = "distribution fo seed count by species and treatment")+
  theme_minimal()+
  facet_wrap(~species)
```

```{r}
flower$residuals <- resid(flowermod3)

# Create a scatter plot of residuals
ggplot(flower, aes(x = predicted, y = residuals)) +
  geom_point(color = "blue", alpha = 0.5, size =2.5) +
  #dashed horizontal line at y=0
  geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
  #adds a linear regression line (without confidence interval) to points, thin to match hline
    geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "dashed", size = .6) +
  #adds a title to graph and to the x and y axis
  labs(x = "Predicted Values", y = "Residuals Values", title = "Residual Analysis") +
  theme_minimal()+
  #Chart title is in bold and size 16
  theme(plot.title = element_text(size = 16, face = "bold"),
          #Axis titles are size 15
        axis.title = element_text(size = 14),
          #Axis text is size 12
        axis.text = element_text(size = 12)
        )

```

Caption: In the graph above, the blue points represent the residual values, the dashed red line represents a reference for if the residual values were equal to '0', and the dashed black line shows a fitted reggression line for the plotted residuals.

Analysis: The negative mean residual value (-.3) illustrates a systematic bias in flowermod3's predictions, which are on average higher than the observed values, indicating that the model is underestimating seed counts by about '.3' seeds. This is also confirmed visually, with a negatively trending regression line below the reference line. Additionally, residuals are not evenly distributed around the reference line, and in conjunction with the BP test illustrates that the assumption of homoscedasticity has been violated.

```{r}
residuals <- resid(flowermod3)
mean_residual <- mean(residuals)
sd_residual <- sd(residuals)

print(mean_residual)
print(sd_residual)

shapiro.test(residuals)
# Breusch-Pagan test for heteroscedasticity
bptest(flowermod3)

```

The p-value (0.002064) illustrates the likelihood of getting the observed test statistic (or a more extreme value) under the assumption of normality. Since the p-value is less than the significance level (0.05), it illustrates that the assumption of normality is violated. Additionally, the tiny p-value for the Breusch-Pagan test (0.00000002694) indicates that the assumption of homoscedasticity is also violated.
